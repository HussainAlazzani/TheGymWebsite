// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheGymWebsite.Models;

namespace TheGymWebsite.Migrations
{
    [DbContext(typeof(GymDbContext))]
    partial class GymDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b5cb5390-960e-4976-858e-b594adf9dfdd",
                            ConcurrencyStamp = "4c632e6c-1676-4b48-80fe-5fce2ec60229",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "ManageBusiness",
                            ClaimValue = "True",
                            RoleId = "b5cb5390-960e-4976-858e-b594adf9dfdd"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "ManageRoles",
                            ClaimValue = "True",
                            RoleId = "b5cb5390-960e-4976-858e-b594adf9dfdd"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ManageUsers",
                            ClaimValue = "True",
                            RoleId = "b5cb5390-960e-4976-858e-b594adf9dfdd"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "IssueBans",
                            ClaimValue = "True",
                            RoleId = "b5cb5390-960e-4976-858e-b594adf9dfdd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2000",
                            UserId = "c162f710-1532-49e9-809d-5edec2bf1846"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Employee",
                            ClaimValue = "04/01/2021",
                            UserId = "c162f710-1532-49e9-809d-5edec2bf1846"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "MembershipExpiry",
                            ClaimValue = "31/12/9999",
                            UserId = "c162f710-1532-49e9-809d-5edec2bf1846"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2000",
                            UserId = "0bc02f37-47aa-42b4-b823-62b225110f16"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1950",
                            UserId = "75af9d64-1f80-4dbc-aed5-4e4b87e6b7cd"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1960",
                            UserId = "0ac35167-b82f-4767-b798-99d1abfbf93e"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1970",
                            UserId = "aa17ff45-53df-4c05-8bce-a1532c1c3265"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1994",
                            UserId = "603c6c67-da52-49c4-89ca-a96d7d10eb6f"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1993",
                            UserId = "b575597d-8f76-41d5-99c6-4f88f4b2da6e"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1984",
                            UserId = "523f8674-e924-446d-9db7-0966bdc6dea1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1982",
                            UserId = "498c3c6b-5276-417b-a805-b9d41ec637e3"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2010",
                            UserId = "346ab453-8f1a-4e6d-816b-4853ce09009f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "c162f710-1532-49e9-809d-5edec2bf1846",
                            RoleId = "b5cb5390-960e-4976-858e-b594adf9dfdd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TheGymWebsite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c162f710-1532-49e9-809d-5edec2bf1846",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 Admin Road",
                            AddressLineTwo = "Admin Area",
                            ConcurrencyStamp = "6fafc5ad-9d07-49e6-ae7b-e026bb97bafe",
                            DateOfBirth = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "AdminFirstName",
                            Gender = 0,
                            LastName = "AdminLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNziAVqC15UEMOBTegRUzX+BtHmlZrPUbPRxegscNgAZ8nVdDebcw5WrkR81mascQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "e1afb851-aa67-4798-b0db-5f737932f707",
                            Title = 0,
                            Town = "AdminTown",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "0bc02f37-47aa-42b4-b823-62b225110f16",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 huss Road",
                            AddressLineTwo = "huss Area",
                            ConcurrencyStamp = "b3c516ee-f53c-4f15-8e92-745c016bec19",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huss@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "hussFirstName",
                            Gender = 0,
                            LastName = "hussLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUSS@YAHOO.COM",
                            NormalizedUserName = "HUSS@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECAEwa+LzVJs5/Uk5ZXutjhiXparxpU0WqWwxzIyIaRuo4LU2hmNNNre4yTXl3wnuw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "5b1cd5ab-e30a-4988-9f37-1d00302ed3a6",
                            Title = 0,
                            Town = "hussTown",
                            TwoFactorEnabled = false,
                            UserName = "huss@yahoo.com"
                        },
                        new
                        {
                            Id = "75af9d64-1f80-4dbc-aed5-4e4b87e6b7cd",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 beky Road",
                            AddressLineTwo = "beky Area",
                            ConcurrencyStamp = "1fe8e533-0095-4945-aa7f-6f0f1b2f89ec",
                            DateOfBirth = new DateTime(1950, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beky@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "bekyFirstName",
                            Gender = 1,
                            LastName = "bekyLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "BEKY@YAHOO.COM",
                            NormalizedUserName = "BEKY@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJYwTYxQrrY9sT4XybNEDzu6kBmLOz7a1gJ0dlRO1J56Rb7pcZP/8IKMu2jTVpJiqA==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "ae085dfe-5755-451f-bf51-e1553863b49b",
                            Title = 0,
                            Town = "bekyTown",
                            TwoFactorEnabled = false,
                            UserName = "beky@yahoo.com"
                        },
                        new
                        {
                            Id = "0ac35167-b82f-4767-b798-99d1abfbf93e",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 alice Road",
                            AddressLineTwo = "alice Area",
                            ConcurrencyStamp = "2c8c6798-564f-42db-b653-61e50d4eed9f",
                            DateOfBirth = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "aliceFirstName",
                            Gender = 1,
                            LastName = "aliceLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@YAHOO.COM",
                            NormalizedUserName = "ALICE@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHsLgo4JtuMy0KFv9JtxPMnIrPyqtxeAsTwD3z2oa5QXyY76QrZEPafqDSAiRN6FFQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "1bd33475-0a4e-48c1-ae04-edea125e3599",
                            Title = 0,
                            Town = "aliceTown",
                            TwoFactorEnabled = false,
                            UserName = "alice@yahoo.com"
                        },
                        new
                        {
                            Id = "aa17ff45-53df-4c05-8bce-a1532c1c3265",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 seba Road",
                            AddressLineTwo = "seba Area",
                            ConcurrencyStamp = "0509295a-4f80-4d79-a3e0-c965dc5251d9",
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seba@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "sebaFirstName",
                            Gender = 1,
                            LastName = "sebaLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEBA@YAHOO.COM",
                            NormalizedUserName = "SEBA@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMd++l/ZVoqL9W9j6hWJfKaMYLXqfpNy0CkWxx3waOh9Qt1fjtmGDyvhUiMcTX9EUQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "220105c7-2e82-406d-b123-8bf1bda8c94a",
                            Title = 0,
                            Town = "sebaTown",
                            TwoFactorEnabled = false,
                            UserName = "seba@yahoo.com"
                        },
                        new
                        {
                            Id = "603c6c67-da52-49c4-89ca-a96d7d10eb6f",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 john Road",
                            AddressLineTwo = "john Area",
                            ConcurrencyStamp = "d9b3070b-b670-49fb-93ec-39508dbb6a94",
                            DateOfBirth = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "johnFirstName",
                            Gender = 0,
                            LastName = "johnLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@YAHOO.COM",
                            NormalizedUserName = "JOHN@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEESoebV+kC/St5EfutfmKrtsNUu2eWv58S6X/X0jVRm9xLnDH3pvOIg5y/qTa1jj7Q==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "9b126d5f-1cc9-4c2b-8928-38ed34597ce8",
                            Title = 0,
                            Town = "johnTown",
                            TwoFactorEnabled = false,
                            UserName = "john@yahoo.com"
                        },
                        new
                        {
                            Id = "b575597d-8f76-41d5-99c6-4f88f4b2da6e",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 tom Road",
                            AddressLineTwo = "tom Area",
                            ConcurrencyStamp = "cea578a4-fc1a-4a99-8e73-18e37018190f",
                            DateOfBirth = new DateTime(1993, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tom@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "tomFirstName",
                            Gender = 0,
                            LastName = "tomLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@YAHOO.COM",
                            NormalizedUserName = "TOM@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDu8WkTd8wThM4+XckBdz+1YtrILaEyAIDnLRIzk6AwPzXTEb3nCY1cFTILS+jGACQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "625029b1-5abb-4e96-a677-f7c6e6988f3c",
                            Title = 0,
                            Town = "tomTown",
                            TwoFactorEnabled = false,
                            UserName = "tom@yahoo.com"
                        },
                        new
                        {
                            Id = "523f8674-e924-446d-9db7-0966bdc6dea1",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 jack Road",
                            AddressLineTwo = "jack Area",
                            ConcurrencyStamp = "775c2503-c1ed-4439-9288-3d7ca9198ec7",
                            DateOfBirth = new DateTime(1984, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "jackFirstName",
                            Gender = 0,
                            LastName = "jackLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK@YAHOO.COM",
                            NormalizedUserName = "JACK@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDmVfc+TeTo00TIn89OLjeuMbraw7HvCTLmgk5UwmJl85ETjXJE/dzFp15nBNHIrWw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "319a7104-6db1-490c-a422-b72a6dac2194",
                            Title = 0,
                            Town = "jackTown",
                            TwoFactorEnabled = false,
                            UserName = "jack@yahoo.com"
                        },
                        new
                        {
                            Id = "498c3c6b-5276-417b-a805-b9d41ec637e3",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 jam Road",
                            AddressLineTwo = "jam Area",
                            ConcurrencyStamp = "55f451ba-c00a-4872-bf64-cb59e964e007",
                            DateOfBirth = new DateTime(1982, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jam@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "jamFirstName",
                            Gender = 0,
                            LastName = "jamLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAM@YAHOO.COM",
                            NormalizedUserName = "JAM@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVWtOx3RT+8h1N4IQSnp0h09cWgmqZ/E2yeMEpmJG5ni4Ps1efus4fngmpRqicf+Q==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "69d9c1a0-a44a-4b75-bc8b-175046d43afb",
                            Title = 0,
                            Town = "jamTown",
                            TwoFactorEnabled = false,
                            UserName = "jam@yahoo.com"
                        },
                        new
                        {
                            Id = "346ab453-8f1a-4e6d-816b-4853ce09009f",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 mark Road",
                            AddressLineTwo = "mark Area",
                            ConcurrencyStamp = "de63d53b-fae9-4587-840d-10d1fc28761e",
                            DateOfBirth = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "markFirstName",
                            Gender = 0,
                            LastName = "markLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARK@YAHOO.COM",
                            NormalizedUserName = "MARK@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3eFva6iCF4M00CnlRIhsZwWQiEySE77qzb97d7dL2lIDLJy1glyBmVJzVtATVxPQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "d09a2d43-e876-4872-b1b9-1ad861154c68",
                            Title = 0,
                            Town = "markTown",
                            TwoFactorEnabled = false,
                            UserName = "mark@yahoo.com"
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.FreePass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FreePasses");
                });

            modelBuilder.Entity("TheGymWebsite.Models.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GymName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLineOne = "33 Oak road",
                            AddressLineTwo = "Erdon",
                            Email = "thegymbirmingham@yahoo.com",
                            GymName = "The Gym",
                            Postcode = "B20 1EZ",
                            Telephone = "07739983984",
                            Town = "Birmingham"
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.GymAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecord");
                });

            modelBuilder.Entity("TheGymWebsite.Models.MembershipDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Duration")
                        .IsUnique();

                    b.ToTable("MembershipDeals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 1,
                            Price = 10m
                        },
                        new
                        {
                            Id = 2,
                            Duration = 3,
                            Price = 20m
                        },
                        new
                        {
                            Id = 3,
                            Duration = 7,
                            Price = 100m
                        },
                        new
                        {
                            Id = 4,
                            Duration = 8,
                            Price = 160m
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.OpenHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayName")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("OpenHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 1,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 2,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 3,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 4,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 5,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CloseTime = new TimeSpan(0, 20, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 6,
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CloseTime = new TimeSpan(0, 20, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 0,
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobPeriod")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<int>("PayInterval")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheGymWebsite.Models.GymAttendance", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", "User")
                        .WithMany("AttendanceRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TheGymWebsite.Models.ApplicationUser", b =>
                {
                    b.Navigation("AttendanceRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
